const fillRandomValues=window.crypto.getRandomValues.bind(crypto),createError=(e,t={})=>Object.assign(new Error,{...t,message:e});export const combineFilters=(...e)=>e.join(",");export const generateApiKey=()=>{const e=[...Array(256).keys()].map(e=>e.toString(16).padStart(2,"0")),t=fillRandomValues(new Uint8Array(16));return t[6]=15&t[6]|64,t[8]=63&t[8]|128,[...t.entries()].map(([t,s])=>[4,6,8,10].includes(t)?`-${e[s]}`:e[s]).join("")};const handleUnexpectedResponse=async e=>{let t;const s=e.clone();try{({message:t}=await e.json())}catch{t=`Response not OK (${e.status})`}throw createError(t,{name:"FetchError",response:s})},isValidId=(e,t)=>{const s=/^[0-9a-z_]+$/iu,i=/^[0-9a-f]{24}$/iu,n=/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/iu;switch(e){case"api-key":return n.test(t);case"box":{const e=20,i=64;return t.length>=e&&t.length<=i&&s.test(t)}case"collection":{const e=1,i=20;return t.length>=e&&t.length>=i&&s.test(t)}case"record":return i.test(t);default:throw new TypeError('Invalid parameter "type": it must be one of "api-key" | "box" | "collection" | "record"')}},isValidResponse=e=>e.ok;export const valueOf=e=>({endsWith:t=>`${e}:*${t}`,includes:t=>`${e}:*${t}*`,is:t=>`${e}:${"number"==typeof t?"=":""}${t}`,isGreaterThan:t=>`${e}:>${t}`,isGreaterThanOrEqualTo:t=>`${e}:>=${t}`,isLessThan:t=>`${e}:<${t}`,isLessThanOrEqualTo:t=>`${e}:<=${t}`,startsWith:t=>`${e}:${t}*`});export class Jsonbox{constructor(e,{apiKey:t,origin:s="https://jsonbox.io"}={}){if(this.getUrl=({collection:e,filter:t,id:s,limit:i,skip:n,sort:a}={})=>{if("string"==typeof s&&"string"==typeof e)throw new TypeError('Cannot use both properties "id" and "collection"');const o=new URL(this.origin);if(o.pathname=`/${this.id}`,"string"==typeof s){if(!isValidId("record",s))throw new TypeError("Invalid record ID");o.pathname+=`/${s}`}else if("string"==typeof e){if(!isValidId("collection",e))throw new TypeError('Invalid collection name: A collection name must consist of at least 1 and not more than 20 characters including alphanumeric and "_"');o.pathname+=`/${e}`}const r={limit:i,q:t,skip:n,sort:a};return o.search=[...Object.entries(r)].filter(([,e])=>void 0!==e).map(([e,t])=>`${e}=${encodeURIComponent(t)}`).join("&"),o.href},this.create=async(e,t)=>{const s={body:JSON.stringify(e),headers:{"Content-Type":"application/json"},method:"POST"};void 0!==this.apiKey&&(s.headers["x-api-key"]=this.apiKey);const i=await fetch(this.getUrl({collection:t}),s);return isValidResponse(i)?i.json():handleUnexpectedResponse(i)},this.delete=async e=>{const t={method:"DELETE"};if(void 0!==this.apiKey&&(t.headers={"x-api-key":this.apiKey}),Array.isArray(e)){const s=e,i=s.map(async e=>{const s=await fetch(this.getUrl({id:e}),t);return isValidResponse(s)?s.json():handleUnexpectedResponse(s)});return(await Promise.allSettled(i)).map(({status:e},t)=>({id:s[t],success:"fulfilled"===e}))}const s={};"string"==typeof e?s.id=e:"object"==typeof e&&(s.filter=e.filter);const i=await fetch(this.getUrl(s),t);return isValidResponse(i)?i.json():handleUnexpectedResponse(i)},this.read=async e=>{const t={method:"GET"};let s;void 0!==this.apiKey&&(t.headers={"x-api-key":this.apiKey}),"string"==typeof e?s={id:e}:"object"==typeof e&&(s=e);const i=await fetch(this.getUrl(s),t);return isValidResponse(i)?i.json():handleUnexpectedResponse(i)},this.remove=this.delete,this.meta=async()=>{const e={method:"GET"};void 0!==this.apiKey&&(e.headers={"x-api-key":this.apiKey});const t=await fetch(`${this.origin}/_meta/${this.id}`,e);return isValidResponse(t)?t.json():handleUnexpectedResponse(t)},this.update=async(e,t)=>{const s={body:JSON.stringify(t),headers:{"Content-Type":"application/json"},method:"PUT"};void 0!==this.apiKey&&(s.headers["x-api-key"]=this.apiKey);const i=await fetch(this.getUrl({id:e}),s);return isValidResponse(i)?i.json():handleUnexpectedResponse(i)},!isValidId("box",e))throw new TypeError('Invalid parmater "id": Box ID must consist of at least 20 and not more than 64 characters including alphanumeric and "_"');if("string"==typeof t&&!isValidId("api-key",t))throw new TypeError('Invalid parameter "apiKey": API key must be a valid UUID');this.apiKey=t,this.id=e,this.origin=s}}